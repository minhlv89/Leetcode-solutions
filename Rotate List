/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (head == NULL) {
            return NULL;
        }
        int count = 0;
        ListNode* tmp = NULL;
        tmp = head;
        while (tmp != NULL) {
            count ++;
            tmp = tmp->next;
        }
        k = k % count;
        ListNode* p1 = head;
        ListNode* p2 = head;
        ListNode* newhead = NULL;
        count = k;
        if (k > 0) {
            while (count > 0 || p2->next != NULL) {
                p2 = p2->next;
                if (count <= 0) {
                    p1 = p1->next;
                }
                count --;
            }
            p2->next = head;
            newhead = p1->next;
            p1->next = NULL;
            return newhead;
        } else if (k < 0){
            while (count < 0) {
                p1 = p1->next;
                count ++;
            }
            newhead = p1;
            while (p2->next != NULL) {
                p2 = p2->next;
            }
            p2->next = head;
            p2 = p2->next;
            while (p2->next != p1) {
                p2 = p2->next;
            }
            p2->next = NULL;
            return newhead;
        }
        else {
            return head;
        }
        return NULL;
    }
};
