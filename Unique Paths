//Solution 1: Dynamic programming - loop method
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> table(n, vector<int>(m, 0));
        if (m == 1 || n == 1) {
            return 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 || j == 0) {
                    table[i][j] = 1;
                } else {
                    table[i][j] = table[i-1][j] + table[i][j-1];
                }
            }
        }
        return table[n-1][m-1];
    }
};

//Solution 2: Dynamic programming - recursion method
class Solution {
public:
    int uniquePathHelper(int row, int col, vector<vector<int>>&visit) {
        int result = 0;
        if (visit[row][col] != 0) {
            return visit[row][col];
        }
        if (row == 0 && col == 0) {
            result = 1;
        } else {
            if (row > 0) {
                result += uniquePathHelper(row - 1, col, visit);
            }
            if (col > 0) {
                result += uniquePathHelper(row, col - 1, visit);
            }
        }
        visit[row][col] = result;
        return result;
    }
    int uniquePaths(int m, int n) {
        if (m == 1 || n == 1) {
            return 1;
        }
        vector<vector<int>> visit(n, vector<int>(m, 0));

        return uniquePathHelper(n - 2, m-1, visit) + uniquePathHelper(n-1, m - 2, visit);
    }
};
