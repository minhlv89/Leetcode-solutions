/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if (head == NULL) {
            return NULL;
        }
        int count = 1;
        ListNode* lastNonReverse = NULL;
        ListNode* reverseTail = head;
        
        while (count < m) {
            lastNonReverse = reverseTail;
            reverseTail = reverseTail->next;
            count ++;
        }
        ListNode* node1 = reverseTail;
        ListNode* node2 = node1->next;
        while (count < n) {
            ListNode* tmp = node2->next;
            node2->next = node1;
            node1 = node2;
            node2 = tmp;
            count ++;
        }

        if (lastNonReverse != NULL){
            lastNonReverse->next = node1;
        } else {
            head = node1;
        }
        reverseTail->next = node2;
        return head;
    }
};
